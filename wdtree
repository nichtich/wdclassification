#!/usr/bin/env perl
use v5.14;
use Pod::Usage;
use Getopt::Long;
use Catmandu -all;
use Graph;

my %opt;
my ($input);

# get options
{
    Getopt::Long::Configure('bundling');
    GetOptions(\%opt, 
        'language|g|l=s',
        'root|Q=s',
        'property|prop|p|P=s',
        'help|h|?',
        'from|f=s',
        'size|s=s',
        'dry',
    ) or pod2usage(2);
    pod2usage(1) if $opt{help};

    # root item as first argument
    if ( @ARGV and $ARGV[0] =~ /^Q?(\d+)(\.[a-z]+)?$/i) {
        $opt{root} = "Q$1";
        shift @ARGV;
    }

    # input file as argument 
    if ( @ARGV ) {
        $opt{from} = shift @ARGV;
    }

    # default values
    $opt{language} ||= 'en';
    $opt{property} ||= 'P279';  # subclass of
    $opt{size}     ||= 'P31';
}

# validate and normalize options
{
    $opt{root} or pod2usage("missing root item");
    $opt{root} =~ /^Q?(\d+)$/i or pod2usage("invalid root item"); 
    $opt{root} = "Q$1";

    $opt{property} =~ /^P?(\d+)$/i or pod2usage("invalid property"); 
    $opt{property} = "P$1";

    $opt{size} =~ /^P?(\d+)$/i or pod2usage("invalid size property"); 
    $opt{size} = "P$1";
}


my $root = $opt{root};

if ($opt{from}) {
    open($input, '<', $opt{from}) or die "Failed to open $opt{from}\n";
} else { 

    my $property = $opt{property};
    my $size     = $opt{size};

	my $sparql = <<SPARQL;
SELECT ?item ?itemLabel ?parent ?size {
  	{ 
		SELECT ?item (count(distinct ?element) as ?size) {
			?item wdt:$property* wd:$root
			OPTIONAL { ?element wdt:$size ?item }
		} GROUP BY ?item 
	}
  	OPTIONAL { ?item wdt:$property ?parent }
  	SERVICE wikibase:label {
		bd:serviceParam wikibase:language "$opt{language}" .
	}
}
SPARQL
    $sparql =~ s/\n/ /mg;
    #my $cmd = "wdq -i -g$opt{language} -lid '$sparql'";
    my $cmd = "wdq -i '$sparql'";

    if ($opt{dry}) {
        say($cmd) && exit;
    }

    open($input, "$cmd |") ## no critic
        or die "wdq execution failed!\n";
}

# parse SPARQL query result

my %items;
my $g = Graph->new;

importer( 'JSON', fh => $input )->each(sub{
    my $id = $_[0]->{item};
	$_[0]->{label} = delete $_[0]->{itemLabel};

    $items{$id} = $_[0];
    warn "$id is no item!\n" if $id !~ /^Q\d+$/;

    if ( $_[0]->{parent} ) {
        if ( $id eq $_[0]->{parent} ) {
            warn "$id is subclass of itself!\n"
        } else {
            $g->add_edge( $_[0]->{item}, $_[0]->{parent} );
        }
    }
});

unless ($items{$root}) {
    die "Wikidata item $root not found!\n";
}

# emit classification in CSV format

use Text::CSV;
use autodie;

my $csv = Text::CSV->new({ binary => 1, sep_char => ',', quote_char => '"', eol => "\n" });
open my $csvfile, '>', "$root.csv";
binmode $csvfile, ':encoding(UTF-8)';

sub make_tree {
    my ($node, $level) = @_;
    
    my $item = $items{$node};
    my $recurse = 1;

    if ( defined $item->{level} ) {
        $item->{level} = '=' x $level;
        $recurse = 0;
    } else {
        $item->{level} = '-' x $level;
    }

    my $fields = [ map { $item->{$_} } qw(level item label size) ];
    
    # TODO: qualifier
    
    $csv->print( $csvfile, $fields );

    if ( $recurse ) {
        my @children = map { $_->[0] } $g->edges_to($node);
        foreach (sort { substr($a,1) cmp substr($b,1) } @children) {
            make_tree($_, $level+1);
        }
    }
}

$csv->print( $csvfile, [qw(level item label size)] );
make_tree($root);

__END__

=head1 NAME

wdtree - extract tree structures from Wikidata

=head1 USAGE

wdtree [options] [ [Qitem] | file.json ]

For instance C<wdtree Q6423319> extracts a classification of Knowledge
Organization Systems (Q6423319) and its subclasses (P279).

=cut
