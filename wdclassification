#!/usr/bin/env perl
use v5.14;
use Pod::Usage;
use Catmandu -all;
use Graph;

# evaluate command line arguments
my ($input, $lang);

my $root = uc(shift @ARGV // '');
my $file = shift @ARGV;

pod2usage(2) if @ARGV or $root !~ /^Q\d+$/;

if (defined $file) {
    open($input, '<', $file) or die "Failed to open $file\n";
} else { 

    $lang = 'en'; # TODO: configure

    my $sparql = "?id wdt:P279* wd:$root OPTIONAL { ?id wdt:P279 ?parent }";
    my $cmd = "wdq -i -g$lang -lid '$sparql'";
    # say $cmd;
    open($input, "$cmd |") ## no critic
        or die "wdq execution failed!\n";
}

# parse SPARQL query result

my %items;
my $g = Graph->new;

importer( 'JSON', fh => $input )->each(sub{
    my $id = $_[0]->{id};

    $items{$id} = $_[0];
    warn "$id is no item!\n" if $id !~ /^Q\d+$/;
    if ( $_[0]->{parent} ) {
        if ( $id eq $_[0]->{parent} ) {
            warn "$id is subclass of itself!\n"
        } else {
            $g->add_edge( $_[0]->{id}, $_[0]->{parent} );
        }
    }
});

unless ($items{$root}) {
    die "Wikidata item $root not found!\n";
}

# emit classification

my $exporter = exporter('CSV', fields => [qw(level id label)]);

sub make_tree {
    my ($node, $level) = @_;
    
    my $item = $items{$node};

    if ( defined $item->{level} ) {
        $item->{level} = '=' x $level;
        $exporter->add($item);
        return;
    }
    
    $item->{level} = '-' x $level;
    $exporter->add($item);

    my @children = map { $_->[0] } $g->edges_to($node);
    foreach (sort { substr($a,1) cmp substr($b,1) } @children) {
        make_tree($_, $level+1);
    }
}

make_tree($root);

__END__

=head1 NAME

wdclass - extract classification from Wikidata

=head1 USAGE

wdclassification [ QID | file.json ]

For instance C<wdclassification Q6423319> extracts a
classification of Knowledge Organization Systems.

=cut
